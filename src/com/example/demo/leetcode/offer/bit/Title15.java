package com.example.demo.leetcode.offer.bit;


/*
面试题15. 二进制中1的个数
请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。
例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

输入：00000000000000000000000010000000
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'

输入：11111111111111111111111111111101
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'
 */
class Solution {
    /*
    *如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，
     那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。
     其余所有位将不会受到影响。
     举个例子：
     一个二进制数1100，从右边数起第三位是处于最右边的一个1。
     减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.
     我们发现减1的结果是把最右边的一个1开始的所有位都取反了。
     这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。
      如1100&1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.
     那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
     */
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count=0;
        while(n!=0){
            count++;
            n=n & (n-1);
        }
        return count;
    }
}

public class Title15 {
    public static void main(String[] args) {
        Solution solution=new Solution();
        System.out.println(solution.hammingWeight(00000000000000000000000010000000));
    }
}
